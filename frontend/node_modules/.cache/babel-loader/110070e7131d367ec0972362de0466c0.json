{"ast":null,"code":"export default class APIService {\n  // Update an article\n  static async UpdateArticle(article_id, body, token) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/${article_id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update article: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating article:', error);\n      throw error;\n    }\n  }\n\n  static async InsertArticle(body, token) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to insert article: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error inserting article:', error);\n      throw error;\n    }\n  }\n\n  static async DeleteArticle(article_id, token) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/${article_id}/`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete article: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting article:', error);\n      throw error;\n    }\n  }\n\n  static async LoginUser(body) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  }\n\n  static async RegisterUser(body) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/users/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Registration failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error registering user:', error);\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"names":["APIService","UpdateArticle","article_id","body","token","response","fetch","process","env","REACT_APP_API_URL","method","headers","JSON","stringify","ok","Error","statusText","json","error","console","InsertArticle","DeleteArticle","LoginUser","RegisterUser"],"sources":["/Users/onurkapucu/Downloads/Django-JSReact-Blog/frontend/src/components/APIService.js"],"sourcesContent":["export default class APIService {\n    // Update an article\n    static async UpdateArticle(article_id, body, token) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/${article_id}/`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                },\n                body: JSON.stringify(body)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Failed to update article: ${response.statusText}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error updating article:', error);\n            throw error;\n        }\n    }\n    \n    static async InsertArticle(body, token) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                },\n                body: JSON.stringify(body)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Failed to insert article: ${response.statusText}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error inserting article:', error);\n            throw error;\n        }\n    }\n    \n    static async DeleteArticle(article_id, token) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/articles/${article_id}/`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Failed to delete article: ${response.statusText}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error deleting article:', error);\n            throw error;\n        }\n    }\n    \n    static async LoginUser(body) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Login failed: ${response.statusText}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error logging in:', error);\n            throw error;\n        }\n    }\n    \n    static async RegisterUser(body) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/users/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Registration failed: ${response.statusText}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error registering user:', error);\n            throw error;\n        }\n    }}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
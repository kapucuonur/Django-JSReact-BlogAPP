{"ast":null,"code":"export default class APIService {\n  // Update an article\n  static async UpdateArticle(article_id, body, token) {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update article: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating article:', error);\n      throw error;\n    }\n  } // Insert a new article\n\n\n  static async InsertArticle(body, token) {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/articles/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to insert article: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error inserting article:', error);\n      throw error;\n    }\n  } // Delete an article\n\n\n  static async DeleteArticle(article_id, token) {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\n        method: 'DELETE',\n        // Corrected to DELETE\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete article: ${response.statusText}`);\n      } // Some APIs return a response even for DELETE\n\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting article:', error);\n      throw error;\n    }\n  } // Login user\n\n\n  static async LoginUser(body) {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/auth/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n  } // Register user\n\n\n  static async RegisterUser(body) {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/users/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Registration failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error registering user:', error);\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"names":["APIService","UpdateArticle","article_id","body","token","response","fetch","method","headers","JSON","stringify","ok","Error","statusText","json","error","console","InsertArticle","DeleteArticle","LoginUser","RegisterUser"],"sources":["/Users/onurkapucu/Downloads/Django-JSReact-Blog/frontend/src/components/APIService.js"],"sourcesContent":["export default class APIService {\n    // Update an article\n    static async UpdateArticle(article_id, body, token) {\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                },\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to update article: ${response.statusText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error updating article:', error);\n            throw error;\n        }\n    }\n\n    // Insert a new article\n    static async InsertArticle(body, token) {\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/api/articles/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                },\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to insert article: ${response.statusText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error inserting article:', error);\n            throw error;\n        }\n    }\n\n    // Delete an article\n    static async DeleteArticle(article_id, token) {\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\n                method: 'DELETE',  // Corrected to DELETE\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to delete article: ${response.statusText}`);\n            }\n\n            // Some APIs return a response even for DELETE\n            return await response.json();\n        } catch (error) {\n            console.error('Error deleting article:', error);\n            throw error;\n        }\n    }\n\n    // Login user\n    static async LoginUser(body) {\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/auth/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Login failed: ${response.statusText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error logging in:', error);\n            throw error;\n        }\n    }\n\n    // Register user\n    static async RegisterUser(body) {\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/api/users/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Registration failed: ${response.statusText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error registering user:', error);\n            throw error;\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}